FROM debian:9

# reminder, use {} around environmental variables, otherwise docker uses it as a literal

LABEL edu.mda.bcb.name="MBatch Stand Alone" \
      edu.mda.bcb.version="2018-10-15-1030" \
      edu.mda.bcb.url="http://<server-ip>:8787"

# install JDK, apt utils
RUN apt-get update && \
    apt-get upgrade -f -y && \
    apt-get install -f -y apt-utils readline-common procps curl && \
    apt-get install -f -y openjdk-8-jdk && \
    apt-get clean

# not sure why, but this does not work as part of the other apt-get chain
RUN apt-get update && \
    apt-get install -f -y gnupg

# Installing R 3.4 on Debian https://cran.r-project.org/bin/linux/debian/
# do apt-get update and install, if this fails with "temporary error", firewall may be blocking DNS, check your docker DNS entries
# https://stackoverflow.com/questions/24991136/docker-build-could-not-resolve-archive-ubuntu-com-apt-get-fails-to-install-a?rq=1
# apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key 'E19F5F87128899B192B1A2C2AD5F960A256A04AF'
# apt-key adv --keyserver keys.gnupg.net --recv-key 'E19F5F87128899B192B1A2C2AD5F960A256A04AF'
####    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key 'E19F5F87128899B192B1A2C2AD5F960A256A04AF' && \
# The above is constantly failing for one reason or another. Use saved key in file
####
# gdebi-core is used for installing RStudio later
COPY installations/jranke.key /jranke.key
RUN echo 'deb http://cran.r-project.org/bin/linux/debian stretch-cran34/' >> /etc/apt/sources.list && \
    apt-key add /jranke.key && \
    rm /jranke.key && \
    apt-get update && \
    apt-get install -f -y texlive && \
    apt-get install -f -y wget libssh2-1 libcairo2-dev libxt-dev curl libcurl4-openssl-dev libssl1.0-dev libxml2-dev && \
    apt-get install -f -y git openssh-client && \
    apt-get install -f -y -t stretch-cran34 littler r-cran-littler r-base r-base-dev r-recommended && \
    apt-get install -f -y gdebi-core && \
    apt-get clean

# register Java 8 with R
RUN R CMD javareconf

# create and setup docker_tcga use to external directory owner
# also, set permissions and ownerships on internal docker directories
RUN mkdir /home/docker_tcga && \
    useradd -l -s /bin/bash -d /home/docker_tcga -u <USERID> docker_tcga && \
    chown -R docker_tcga:docker_tcga /home/docker_tcga

# create and setup docker_tcga user
# also, set permissions and ownerships on internal docker directories
# make and set ownership and permissions on internal image volume mount locations
# must be done in one step, or could lock permissions in future images
RUN mkdir -p /BEI/MBATCH && \
    mkdir -p /BEI/WEBSITE && \
    mkdir -p /BEI/OUTPUT && \
    chown -R docker_tcga:docker_tcga /BEI && \
    chmod -R u+rwx /BEI

# make subdirectory in user home for running
# COPY is always done as root!!!!
RUN mkdir /home/docker_tcga/mbatch && \
    chown -R docker_tcga:docker_tcga /home/docker_tcga/mbatch && \
    chmod -R u+rwx /home/docker_tcga/mbatch
COPY installations /home/docker_tcga/mbatch

RUN chown -R docker_tcga:docker_tcga /home/docker_tcga && \
    chmod -R u+rwx /home/docker_tcga && \
    ls -l /home/docker_tcga/mbatch

RUN Rscript /home/docker_tcga/mbatch/installNGCHM.R

# perform R installs for packages, and install MBatch and MBatchUtils
RUN Rscript /home/docker_tcga/mbatch/installForMBatch0.R && \
    Rscript /home/docker_tcga/mbatch/installForMBatch1.R && \
    Rscript /home/docker_tcga/mbatch/installForMBatch2.R && \
    Rscript /home/docker_tcga/mbatch/installForMBatch3.R

# install MBatch and MBatchUtils separately from above, so can be installed without reperforming above
RUN cd /home/docker_tcga/mbatch && \
    R CMD INSTALL MBatch_*.tar.gz && \
    R CMD INSTALL MBatchUtils_*.tar.gz

# switch from root to docker_tcga user
USER docker_tcga

# set working directory for future commands
WORKDIR /home/docker_tcga/mbatch
CMD ["/bin/bash", "/home/docker_tcga/mbatch/runRproc.bash", "http://beiService:8080/"]

